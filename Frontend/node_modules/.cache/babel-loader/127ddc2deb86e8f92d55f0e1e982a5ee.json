{"ast":null,"code":"var _jsxFileName = \"/Users/anaghasethuraman/Desktop/CMPE-273-UberEats-application-prototype Lab2/Frontend/src/components/Register/Register.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button, Input } from 'reactstrap';\nimport backendServer from \"../../webConfig\";\nimport validator from 'validator';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      e.preventDefault();\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.sendRestAPI = data => {\n      axios.post(`${backendServer}/register`, data).then(res => {\n        if (res.data.message) {\n          this.setState({\n            message: res.data.message\n          });\n          this.setState({\n            registerStatus: \"failed\"\n          });\n        } else {\n          this.setState({\n            message: res.data.username\n          });\n          this.setState({\n            username: res.data.username\n          });\n          this.setState({\n            registerStatus: \"\"\n          });\n        }\n\n        console.log(this.state.message);\n\n        if (this.state.registerStatus !== \"failed\") {\n          const {\n            history\n          } = this.props;\n          history.push('/login');\n        } else {\n          const {\n            history\n          } = this.props;\n          history.push('/register');\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.validateCustRegister = () => {\n      let isValid = true;\n\n      if (this.nullOrEmpty(this.state.username) || this.nullOrEmpty(this.state.email) || this.nullOrEmpty(this.state.password)) {\n        alert(\"Fields cannot be empty\");\n        isValid = false;\n      } else {\n        if (!validator.isEmail(this.state.email)) {\n          alert('Enter valid Email!');\n          isValid = false;\n        }\n\n        if (!this.state.username.match(/^[a-zA-Z ]+$/)) {\n          alert(\"Name can contain only alphabets\");\n          isValid = false;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.validateOwnerRegister = () => {\n      let isValid = true;\n\n      if (this.nullOrEmpty(this.state.username) || this.nullOrEmpty(this.state.email) || this.nullOrEmpty(this.state.password) || this.nullOrEmpty(this.state.zipcode)) {\n        alert(\"Fields cannot be empty\");\n        isValid = false;\n      } else {\n        if (!validator.isEmail(this.state.email)) {\n          alert('Enter valid Email!');\n          isValid = false;\n        }\n\n        if (!this.state.username.match(/^[a-zA-Z ]+$/)) {\n          alert(\"Name can contain only alphabets\");\n          isValid = false;\n        }\n\n        if (!this.state.zipcode.match(/^[0-9]+$/)) {\n          alert(\"Zipcode can only contain numbers\");\n          isValid = false;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const buyerData = {\n        name: this.state.username,\n        email: this.state.email,\n        password: this.state.password,\n        //restaurantname: \"N/A\",\n        zipcode: \"N/A\",\n        owner: false\n      };\n      const ownerData = {\n        name: this.state.username,\n        email: this.state.email,\n        password: this.state.password,\n        //restaurantname: this.state.restaurantname,\n        zipcode: this.state.zipcode,\n        owner: true\n      };\n      console.log(ownerData);\n\n      if (!this.state.owner) {\n        if (this.validateCustRegister() === true) {\n          this.sendRestAPI(buyerData);\n        }\n      } else {\n        if (this.validateOwnerRegister() === true) {\n          this.sendRestAPI(ownerData);\n        }\n      }\n    };\n\n    this.switchForm = e => {\n      !this.state.owner ? this.setState({\n        owner: true\n      }) : this.setState({\n        owner: false\n      });\n    };\n\n    this.state = {\n      username: null,\n      email: null,\n      password: null,\n      //restaurantname: null,\n      zipcode: null,\n      owner: false,\n      message: '',\n      registerStatus: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.switchForm = this.switchForm.bind(this);\n  }\n\n  nullOrEmpty(str) {\n    return str === null || str === \"\";\n  }\n\n  render() {\n    let redirectHome = null;\n    var ownerForm = null;\n    var userForm = null;\n    var accountType = \"Owner\"; // if(this.state.registerStatus != \"failed\"){\n    //     redirectHome = <Redirect to=\"/Login\" />\n    // }\n    // else{\n    //     redirectHome = <Redirect to=\"/Register\" />\n    // }\n    // if(this.state.message == \"User email already registered\"){\n    //     alert(\"Email already exists\");\n    // }\n\n    if (this.state.owner) {\n      ownerForm = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, \"Restaurant Name: \", /*#__PURE__*/React.createElement(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"username\",\n        maxlength: \"30\",\n        placeholder: \"Restaurant name\",\n        value: this.state.username,\n        onChange: this.handleChange,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 38\n        }\n      }), \"ZipCode: \", /*#__PURE__*/React.createElement(Input, {\n        className: \"form-control\",\n        type: \"number\",\n        name: \"zipcode\",\n        maxlength: \"5\",\n        placeholder: \"5 digits\",\n        value: this.state.zipcode,\n        onChange: this.handleChange,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 30\n        }\n      })));\n      accountType = \"User\";\n    } else {\n      userForm = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, \"Name:\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 18\n        }\n      }), \" \", /*#__PURE__*/React.createElement(Input, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"username\",\n        placeholder: \"Your name\",\n        minlength: \"3\",\n        maxlength: \"30\",\n        value: this.state.username,\n        onChange: this.handleChange,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 24\n        }\n      }));\n      accountType = \"Owner\";\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, redirectHome, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 19\n      }\n    }, \"Let's get started.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, \"Please enter required details to register.\")), userForm, ownerForm, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    }, \"Email: \", /*#__PURE__*/React.createElement(Input, {\n      className: \"form-control\",\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"example@gmail.com\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 19\n      }\n    }, \"Password: \", /*#__PURE__*/React.createElement(Input, {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"At least 6 characters\",\n      minlength: \"6\",\n      maxlength: \"16\",\n      id: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-primary\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, \"Register\"), \" \\xA0\", /*#__PURE__*/React.createElement(Button, {\n      onClick: this.switchForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"Sign Up as \", accountType)), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, \"Already have an account? \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 48\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 83\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, \" \", this.state.message, \" \")))));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["/Users/anaghasethuraman/Desktop/CMPE-273-UberEats-application-prototype Lab2/Frontend/src/components/Register/Register.js"],"names":["React","Component","axios","Redirect","Link","Button","Input","backendServer","validator","Register","constructor","props","handleChange","e","preventDefault","setState","target","name","value","console","log","state","sendRestAPI","data","post","then","res","message","registerStatus","username","history","push","catch","error","validateCustRegister","isValid","nullOrEmpty","email","password","alert","isEmail","match","validateOwnerRegister","zipcode","handleSubmit","buyerData","owner","ownerData","switchForm","bind","str","render","redirectHome","ownerForm","userForm","accountType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA6B,YAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AACA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAC7BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAoBnBC,YApBmB,GAoBHC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,QAAL,CAAc;AAAE,SAACF,CAAC,CAACG,MAAF,CAASC,IAAV,GAAiBJ,CAAC,CAACG,MAAF,CAASE;AAA5B,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACH,KAxBkB;;AAAA,SA2BnBC,WA3BmB,GA2BJC,IAAD,IAAU;AACpBrB,MAAAA,KAAK,CAACsB,IAAN,CAAY,GAAEjB,aAAc,WAA5B,EAAwCgB,IAAxC,EACKE,IADL,CACUC,GAAG,IAAI;AACT,YAAGA,GAAG,CAACH,IAAJ,CAASI,OAAZ,EAAoB;AAChB,eAAKZ,QAAL,CAAc;AAACY,YAAAA,OAAO,EAACD,GAAG,CAACH,IAAJ,CAASI;AAAlB,WAAd;AACA,eAAKZ,QAAL,CAAc;AAACa,YAAAA,cAAc,EAAC;AAAhB,WAAd;AAEH,SAJD,MAIK;AACD,eAAKb,QAAL,CAAc;AAAEY,YAAAA,OAAO,EAAED,GAAG,CAACH,IAAJ,CAASM;AAApB,WAAd;AACA,eAAKd,QAAL,CAAc;AAAEc,YAAAA,QAAQ,EAAEH,GAAG,CAACH,IAAJ,CAASM;AAArB,WAAd;AACA,eAAKd,QAAL,CAAc;AAACa,YAAAA,cAAc,EAAC;AAAhB,WAAd;AACH;;AAEDT,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWM,OAAvB;;AACA,YAAG,KAAKN,KAAL,CAAWO,cAAX,KAA8B,QAAjC,EAA0C;AACtC,gBAAM;AAACE,YAAAA;AAAD,cAAY,KAAKnB,KAAvB;AACAmB,UAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACH,SAHD,MAGK;AACD,gBAAM;AAACD,YAAAA;AAAD,cAAY,KAAKnB,KAAvB;AACAmB,UAAAA,OAAO,CAACC,IAAR,CAAa,WAAb;AACH;AAEJ,OArBL,EAqBOC,KArBP,CAsBSC,KAAD,IAAW;AACTd,QAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD,OAxBT;AA6BH,KAzDkB;;AAAA,SA8DnBC,oBA9DmB,GA8DI,MAAM;AACzB,UAAIC,OAAO,GAAG,IAAd;;AACA,UAAG,KAAKC,WAAL,CAAiB,KAAKf,KAAL,CAAWQ,QAA5B,KAA0C,KAAKO,WAAL,CAAiB,KAAKf,KAAL,CAAWgB,KAA5B,CAA1C,IAAiF,KAAKD,WAAL,CAAiB,KAAKf,KAAL,CAAWiB,QAA5B,CAApF,EAA0H;AAC1HC,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACGJ,QAAAA,OAAO,GAAG,KAAV;AACF,OAHD,MAII;AACA,YAAI,CAAC3B,SAAS,CAACgC,OAAV,CAAkB,KAAKnB,KAAL,CAAWgB,KAA7B,CAAL,EAA0C;AACtCE,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACAJ,UAAAA,OAAO,GAAG,KAAV;AACH;;AAED,YAAG,CAAC,KAAKd,KAAL,CAAWQ,QAAX,CAAoBY,KAApB,CAA0B,cAA1B,CAAJ,EAA8C;AAC1CF,UAAAA,KAAK,CAAC,iCAAD,CAAL;AACAJ,UAAAA,OAAO,GAAG,KAAV;AACH;AACJ;;AACD,aAAOA,OAAP;AACF,KAhFiB;;AAAA,SAiFlBO,qBAjFkB,GAiFM,MAAM;AAC3B,UAAIP,OAAO,GAAG,IAAd;;AACA,UAAG,KAAKC,WAAL,CAAiB,KAAKf,KAAL,CAAWQ,QAA5B,KAA0C,KAAKO,WAAL,CAAiB,KAAKf,KAAL,CAAWgB,KAA5B,CAA1C,IAAiF,KAAKD,WAAL,CAAiB,KAAKf,KAAL,CAAWiB,QAA5B,CAAjF,IACG,KAAKF,WAAL,CAAiB,KAAKf,KAAL,CAAWsB,OAA5B,CADN,EAC4C;AAC5CJ,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACGJ,QAAAA,OAAO,GAAG,KAAV;AACF,OAJD,MAKI;AACA,YAAI,CAAC3B,SAAS,CAACgC,OAAV,CAAkB,KAAKnB,KAAL,CAAWgB,KAA7B,CAAL,EAA0C;AACtCE,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACAJ,UAAAA,OAAO,GAAG,KAAV;AACH;;AACD,YAAG,CAAC,KAAKd,KAAL,CAAWQ,QAAX,CAAoBY,KAApB,CAA0B,cAA1B,CAAJ,EAA8C;AAC1CF,UAAAA,KAAK,CAAC,iCAAD,CAAL;AACAJ,UAAAA,OAAO,GAAG,KAAV;AACH;;AACD,YAAG,CAAC,KAAKd,KAAL,CAAWsB,OAAX,CAAmBF,KAAnB,CAAyB,UAAzB,CAAJ,EAAyC;AACrCF,UAAAA,KAAK,CAAC,kCAAD,CAAL;AACAJ,UAAAA,OAAO,GAAG,KAAV;AACH;AAEJ;;AACD,aAAOA,OAAP;AACF,KAxGiB;;AAAA,SAyGnBS,YAzGmB,GAyGH/B,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AAEA,YAAM+B,SAAS,GAAG;AACd5B,QAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWQ,QADH;AAEdQ,QAAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWgB,KAFJ;AAGdC,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB,QAHP;AAId;AACAK,QAAAA,OAAO,EAAE,KALK;AAMdG,QAAAA,KAAK,EAAE;AANO,OAAlB;AASA,YAAMC,SAAS,GAAG;AACd9B,QAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWQ,QADH;AAEdQ,QAAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWgB,KAFJ;AAGdC,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB,QAHP;AAId;AACAK,QAAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWsB,OALN;AAMdG,QAAAA,KAAK,EAAE;AANO,OAAlB;AAQA3B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,SAAZ;;AACA,UAAI,CAAC,KAAK1B,KAAL,CAAWyB,KAAhB,EAAuB;AACnB,YAAI,KAAKZ,oBAAL,OAAgC,IAApC,EAA0C;AACtC,eAAKZ,WAAL,CAAiBuB,SAAjB;AACH;AACJ,OAJD,MAIO;AACH,YAAI,KAAKH,qBAAL,OAAiC,IAArC,EAA2C;AACvC,eAAKpB,WAAL,CAAiByB,SAAjB;AACH;AAEJ;AAEJ,KAzIkB;;AAAA,SA4InBC,UA5ImB,GA4ILnC,CAAD,IAAO;AACf,OAAC,KAAKQ,KAAL,CAAWyB,KAAb,GAAsB,KAAK/B,QAAL,CAAc;AAAE+B,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAtB,GAAuD,KAAK/B,QAAL,CAAc;AAAE+B,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAvD;AACH,KA9IkB;;AAGf,SAAKzB,KAAL,GAAa;AACTQ,MAAAA,QAAQ,EAAE,IADD;AAETQ,MAAAA,KAAK,EAAE,IAFE;AAGTC,MAAAA,QAAQ,EAAE,IAHD;AAIT;AACAK,MAAAA,OAAO,EAAE,IALA;AAMTG,MAAAA,KAAK,EAAE,KANE;AAOTnB,MAAAA,OAAO,EAAE,EAPA;AAQTC,MAAAA,cAAc,EAAC;AARN,KAAb;AAYA,SAAKhB,YAAL,GAAoB,KAAKA,YAAL,CAAkBqC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKL,YAAL,GAAoB,KAAKA,YAAL,CAAkBK,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKD,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAyCDb,EAAAA,WAAW,CAACc,GAAD,EAAM;AACb,WAAOA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,EAA/B;AACH;;AAmFDC,EAAAA,MAAM,GAAG;AACL,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAG,IAAf;AACA,QAAIC,WAAW,GAAG,OAAlB,CAJK,CAKL;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,QAAI,KAAKlC,KAAL,CAAWyB,KAAf,EAAsB;AAClBO,MAAAA,SAAS,gBACT;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqB,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,UAAjD;AAA4D,QAAA,SAAS,EAAC,IAAtE;AAA2E,QAAA,WAAW,EAAC,iBAAvF;AAAyG,QAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWQ,QAA3H;AAAqI,QAAA,QAAQ,EAAE,KAAKjB,YAApJ;AAAkK,QAAA,QAAQ,MAA1K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADrB,4BAEa,oBAAC,KAAD;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,IAAI,EAAC,QAAtC;AAA+C,QAAA,IAAI,EAAC,SAApD;AAA8D,QAAA,SAAS,EAAC,GAAxE;AAA4E,QAAA,WAAW,EAAC,UAAxF;AAAmG,QAAA,KAAK,EAAE,KAAKS,KAAL,CAAWsB,OAArH;AAA8H,QAAA,QAAQ,EAAE,KAAK/B,YAA7I;AAA2J,QAAA,QAAQ,MAAnK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFb,CADJ,CADA;AAOA2C,MAAAA,WAAW,GAAG,MAAd;AACH,KATD,MASM;AACFD,MAAAA,QAAQ,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,oBACW,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,UAAjD;AAA4D,QAAA,WAAW,EAAC,WAAxE;AAAoF,QAAA,SAAS,EAAC,GAA9F;AAAkG,QAAA,SAAS,EAAC,IAA5G;AAAiH,QAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWQ,QAAnI;AAA6I,QAAA,QAAQ,EAAE,KAAKjB,YAA5J;AAA0K,QAAA,QAAQ,MAAlL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADX,CADA;AAIH2C,MAAAA,WAAW,GAAG,OAAd;AACA;;AAED,wBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKH,YADL,eAGA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFF,CADF,EAKGE,QALH,EAMGD,SANH,eAOE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEO,oBAAC,KAAD;AAAS,MAAA,SAAS,EAAC,cAAnB;AAAkC,MAAA,IAAI,EAAC,OAAvC;AAA+C,MAAA,IAAI,EAAC,OAApD;AAA4D,MAAA,WAAW,EAAC,mBAAxE;AAA4F,MAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWgB,KAA9G;AAAqH,MAAA,QAAQ,EAAE,KAAKzB,YAApI;AAAkJ,MAAA,QAAQ,MAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFP,CAPF,eAYE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEU,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,UAArC;AAAgD,MAAA,IAAI,EAAC,UAArD;AAAgE,MAAA,WAAW,EAAC,uBAA5E;AAAoG,MAAA,SAAS,EAAC,GAA9G;AAAkH,MAAA,SAAS,EAAC,IAA5H;AAAiI,MAAA,EAAE,EAAC,UAApI;AAA+I,MAAA,KAAK,EAAE,KAAKS,KAAL,CAAWiB,QAAjK;AAA2K,MAAA,QAAQ,EAAE,KAAK1B,YAA1L;AAAwM,MAAA,QAAQ,MAAhN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFV,CAZF,eAiBE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAE,KAAKgC,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,wBAEF,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKI,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA8CO,WAA9C,CAFE,CAjBF,eAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA6B,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA7B,CArBF,eAqBkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBlE,eAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKlC,KAAL,CAAWM,OAAjB,MAtBJ,CADF,CADF,CAHA,CAHJ;AA0CH;;AA3N4B;;AA8NjC,eAAelB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button ,Input} from 'reactstrap';\nimport backendServer from \"../../webConfig\";\nimport validator from 'validator';\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: null,\n            email: null,\n            password: null,\n            //restaurantname: null,\n            zipcode: null,\n            owner: false,\n            message: '',\n            registerStatus:null\n            \n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.switchForm = this.switchForm.bind(this);\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({ [e.target.name]: e.target.value });\n        console.log(this.state);\n    }\n\n    //send registration data to server for processing\n    sendRestAPI = (data) => {\n        axios.post(`${backendServer}/register`, data)\n            .then(res => {\n                if(res.data.message){\n                    this.setState({message:res.data.message})\n                    this.setState({registerStatus:\"failed\"})\n\n                }else{\n                    this.setState({ message: res.data.username }) \n                    this.setState({ username: res.data.username })\n                    this.setState({registerStatus:\"\"})\n                }\n\n                console.log(this.state.message)\n                if(this.state.registerStatus !== \"failed\"){\n                    const {history} = this.props;\n                    history.push('/login'); \n                }else{\n                    const {history} = this.props;\n                    history.push('/register'); \n                }\n                \n            }).catch(\n                (error) => {\n                  console.log(error);\n                }\n            );\n            \n            \n          \n    }\n\n    nullOrEmpty(str) {\n        return str === null || str === \"\" \n    }\n    validateCustRegister = () => {\n        let isValid = true;\n        if(this.nullOrEmpty(this.state.username)  || this.nullOrEmpty(this.state.email) ||  this.nullOrEmpty(this.state.password)){\n        alert(\"Fields cannot be empty\");\n           isValid = false;\n        }\n        else{\n            if (!validator.isEmail(this.state.email)) {\n                alert('Enter valid Email!')\n                isValid = false;\n            }\n            \n            if(!this.state.username.match(/^[a-zA-Z ]+$/)){\n                alert(\"Name can contain only alphabets\")\n                isValid = false;\n            }\n        } \n        return isValid;\n     }\n     validateOwnerRegister = () => {\n        let isValid = true;\n        if(this.nullOrEmpty(this.state.username)  || this.nullOrEmpty(this.state.email) ||  this.nullOrEmpty(this.state.password)\n            ||this.nullOrEmpty(this.state.zipcode)) {\n        alert(\"Fields cannot be empty\");\n           isValid = false;\n        }\n        else{\n            if (!validator.isEmail(this.state.email)) {\n                alert('Enter valid Email!')\n                isValid = false;\n            }\n            if(!this.state.username.match(/^[a-zA-Z ]+$/)){\n                alert(\"Name can contain only alphabets\")\n                isValid = false;\n            }\n            if(!this.state.zipcode.match(/^[0-9]+$/)){\n                alert(\"Zipcode can only contain numbers\")\n                isValid = false;\n            }\n\n        } \n        return isValid;\n     }\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const buyerData = {\n            name: this.state.username,\n            email: this.state.email,\n            password: this.state.password,\n            //restaurantname: \"N/A\",\n            zipcode: \"N/A\",\n            owner: false\n        }\n\n        const ownerData = {\n            name: this.state.username,\n            email: this.state.email,\n            password: this.state.password,\n            //restaurantname: this.state.restaurantname,\n            zipcode: this.state.zipcode,\n            owner: true\n        }\n        console.log(ownerData);\n        if (!this.state.owner) {\n            if (this.validateCustRegister() === true) {           \n                this.sendRestAPI(buyerData);\n            }\n        } else {\n            if (this.validateOwnerRegister() === true) {           \n                this.sendRestAPI(ownerData);\n            }\n            \n        }\n\n    }\n\n    //switch between user and owner sign up form\n    switchForm = (e) => {\n        (!this.state.owner) ? this.setState({ owner: true }) : this.setState({ owner: false });\n    }\n\n    render() {\n        let redirectHome = null;\n        var ownerForm = null;\n        var userForm = null;\n        var accountType = \"Owner\";\n        // if(this.state.registerStatus != \"failed\"){\n        //     redirectHome = <Redirect to=\"/Login\" />\n        // }\n        // else{\n        //     redirectHome = <Redirect to=\"/Register\" />\n        // }\n        \n        // if(this.state.message == \"User email already registered\"){\n        //     alert(\"Email already exists\");\n        // }\n        if (this.state.owner) {\n            ownerForm =\n            <div className=\"form-group\">\n                <div >\n                    Restaurant Name: <Input className=\"form-control\" type=\"text\" name=\"username\" maxlength=\"30\" placeholder=\"Restaurant name\" value={this.state.username} onChange={this.handleChange} required></Input>\n                    ZipCode: <Input  className=\"form-control\" type=\"number\" name=\"zipcode\" maxlength=\"5\" placeholder=\"5 digits\" value={this.state.zipcode} onChange={this.handleChange} required></Input>\n                </div>\n                </div>\n            accountType = \"User\";\n        } else{\n            userForm =\n            <div >\n            Name:<br/> <Input className=\"form-control\" type=\"text\" name=\"username\" placeholder=\"Your name\" minlength=\"3\" maxlength=\"30\" value={this.state.username} onChange={this.handleChange} required></Input>\n        </div>\n         accountType = \"Owner\";\n        }\n\n        return (\n\n\n            <div>\n                {redirectHome}\n           \n            <div className=\"container\">\n              <div className=\"login-form\">\n                <div className=\"main-div\">\n                  <div className=\"panel\">\n                  <h1>Let's get started.</h1>\n                    <p>Please enter required details to register.</p>\n                  </div>\n                  {userForm}\n                  {ownerForm}\n                  <div className=\"form-group\">\n\n                  Email: <Input   className=\"form-control\" type=\"email\" name=\"email\" placeholder=\"example@gmail.com\" value={this.state.email} onChange={this.handleChange} required></Input>\n                   \n                  </div>\n                  <div className=\"form-group\">\n\n                  Password: <Input className=\"form-control\" type=\"password\" name=\"password\" placeholder=\"At least 6 characters\" minlength=\"6\" maxlength=\"16\" id=\"password\" value={this.state.password} onChange={this.handleChange} required></Input>\n                    \n                  </div>\n                  <div className=\"form-group\">\n                  <Button className=\"btn btn-primary\" onClick={this.handleSubmit}>Register</Button> &nbsp;\n                <Button onClick={this.switchForm}>Sign Up as {accountType}</Button>\n                  </div>\n                  <h4>Already have an account? <Link to=\"/login\">Login</Link></h4><br />\n                    <h2> {this.state.message} </h2>\n                 \n                  </div>\n                </div>\n              </div>\n            </div>\n       \n\n\n           \n          \n        )\n    }\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}